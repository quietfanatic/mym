#!/usr/bin/perl
my $old_cwd = $ENV{PWD} // die "\$ENV{PWD} was undefined\n";
if (__FILE__ =~ /^(.*)\//) {
    chdir $1;
}
else {
    require FindBin;
    chdir $FindBin::Bin;
}

sub USAGE {
    print <<"END";
USAGE: $0 <options>? <command>
Available commands are:
    play <options>? <files>?
        Start an mplayer instance.  If no <files> are given, reads filenames
         from pl/default.  After filtering and shuffling, the queued tracks
         will be written to pl/queue.  The curretly-playing track is visible
         in ./current.  Available options are:
            -all : don't ignore tracks that have been rated down
            -upped : play only tracks that have been rated up
            -downed : play only tracks that have been rated down
            -shuffle : play in random order
            -sort=[filename|album|track] : sort by filename or album/track
              (album and track mean the same thing.)
            -set-default : make given files into default playlist
            -mplayer-opts=<opts> : pass arguments to mplayer
    resume
        Continue a play session that was interrupted.
    up <file>?
        Rate up a file, defaulting to current track.
    down <file>?
        Rate down a file, defaulting to current track, and causing the
         currently playing player to step forward if so.
    info <file>?
        Print id3v2 tags for the file, defaulting to current track.
    control <command>
        Send a command to mplayer through a fifo.  See mplayer's documentation.
         Some useful commands are:
            quit
            pause
            pt_step +1 : step forward in queue
            pt_step -1 : step backward in queue
    parse
        Just interpret mplayer's output and write to ./current.  This is used
         internally by play.
Universal options are:
    -notify : Any relevant information and error messages are sent to
               notify-send as well as being printed.  Does not notify
               when the current track has changed.

END
}

sub slurp {
    my ($file) = @_;
    open my $F, '<', $file or die "Couldn't open $file for reading: $!\n";
    local $/;
    my $r = <$F>;
    close $F or die "Couldn't close $file: $!\n";
    return $r;
}
sub lines {
    my ($file) = @_;
    open my $F, '<', $file or die "Couldn't open $file for reading: $!\n";
    my @r = <$F>;
    close $F or die "Couldn't close $file: $!\n";
    chomp for @r;
    return @r;
}
sub splat {
    my ($file, @str) = @_;
    open my $F, '>', $file or die "Couldn't open $file for writing: $!\n";
    print $F @str;
    close $F or die "Couldn't close $file: $!\n";
}
sub append {
    my ($file, $str) = @_;
    open my $F, '>>', $file or die "Couldn't open $file for writing: $!\n";
    print $F $str;
    close $F or die "Couldn't close $file: $!\n";
}
sub success {
    return "\e[92m✓\e[0m @_";
}
sub failure {
    return "\e[91m✗\e[0m @_";
}
sub warning {
    return "\e[93m?\e[0m @_";
}
my $selected_current = 0;
sub select_track {
    if (@ARGV) {
        return shift @ARGV;
    }
    else {
        $selected_current = 1;
        my $current = slurp 'current';
        chomp $current;
        $current or die failure "No file currently playing\n";
        return $current;
    }
}
sub escape_html {
    my ($s) = @_;
    my %esc = (
        '&' => 'amp',
        '<' => 'lt',
    );
    $s =~ s/([&<])/&$esc{$1};/g;
    return $s;
}

my $notify = 0;
my $upped = 0;
my $downed = 0;
my $all = 0;
my $shuffle = 0;
my $sort;
my $set_default = 0;
my $done_options = 0;
my @mplayer_opts;
@ARGV = grep {
    if ($done_options) {
        $_;
    }
    elsif (/^--?help$/) {
        USAGE;
        exit 1;
    }
    elsif (/^--?notify$/) {
        $notify = 1;
        ();
    }
    elsif (/^--?upped$/) {
        $upped = 1;
        ();
    }
    elsif (/^--?downed$/) {
        $downed = 1;
        ();
    }
    elsif (/^--?all$/) {
        $all = 1;
        ();
    }
    elsif (/^--?shuffle$/) {
        $shuffle = 1;
        ();
    }
    elsif (/^--?sort=(filename|album|track)$/) {
        $sort = $1;
        ();
    }
    elsif (/^--?set-default$/) {
        $set_default = 1;
        ();
    }
    elsif (/^--?mplayer-opts=(.*)$/) {
        @mplayer_opts = map quotemeta($_), split /\s+/, $1;
        ();
    }
    elsif (/^--$/) {
        $done_options;
        ();
    }
    elsif (/^-/) {
        warn failure "Unrecognized option $_; try \"$0 help\"\n";
        exit 1;
    }
    else {
        $_;
    }
} @ARGV;

if ($notify) {
    $SIG{__DIE__} = sub {
        my $mess = $_[0];
        $mess =~ s/\e\[\d+m//g;
        system 'notify-send', '-u', 'critical', 'mym error', escape_html($mess);
        die $mess;
    }
}

 # First intuit the command.
my $command;
if ($0 =~ /([^\\\/]+)$/) {
    if ($1 eq 'mym') {
        if (@ARGV) {
            $command = shift @ARGV;
        }
        else {
            die failure "No command given and no symlink called.  Try \"$0 help\"\n";
        }
    }
    else {
        $command = $1;
    }
}
else {
    die failure "\$0 had a weird format: $0\n";
}

if ($command eq 'play') {
    if (-s 'current') {
         die failure "There is already a mym running.\n";
    }
    -e 'control-pipe' or system qw(mkfifo control-pipe);
    -d 'pl' or mkdir 'pl';
    my @queue = @ARGV;
    if (!@queue) {
        -s 'pl/default' or die failure "No arguments given and there are no filenames in pl/default.";
        @queue = lines 'pl/default';
    }
    for (@queue) {
        unless (/^\//) {
            $_ = "$old_cwd/$_";
        };
    }
    warn 'before: ', 0+@queue;
    if ($downed) {
        my %down = map {$_ => 1} lines 'pl/down';
        @queue = grep $down{$_}, @queue;
    }
    if ($upped) {
        my %up = map {$_ => 1} lines 'pl/up';
        @queue = grep $up{$_}, @queue;
    }
    if (!$all && !$downed && !$upped) {
        my %down = map {$_ => 1} lines 'pl/down';
        @queue = grep !$down{$_}, @queue;
    }
    warn 'after: ', 0+@queue;
    if ($sort eq 'filename') {
        @queue = sort @queue;
    }
    elsif ($sort eq 'album' or $sort eq 'track') {
        my %track;
        my %album;
        my $i = 0;
        for (@queue) {
            print "sorting...$i\r";
            $i += 1;
            (my $esc_track = $_) =~ s/'/'\\''/g;
            my $info = `id3v2 -R '$esc_track'`;
            $track{$_} = $info =~ /^TRCK: (.*)$/m
                ? 0+$1 : -1;
            $album{$_} = $info =~ /^TALB: (.*)$/m
                ? $1 : '!<unknown album>';
        }
        @queue = sort { $album{$a} cmp $album{$b} || $track{$a} <=> $track{$b} } @queue;
    }
    if ($set_default) {
        splat 'pl/default', join("\n", @queue) . "\n";
    }
    if ($shuffle) {
        require List::Util;
        @queue = List::Util::shuffle(@queue);
    }
    splat 'pl/queue', join("\n", @queue) . "\n";
     # This method allows user input on the terminal.
    system("mplayer @mplayer_opts -input file=control-pipe -playlist pl/queue | ./mym parse");
    splat 'current', '';
}
elsif ($command eq 'resume') {
    my $current = slurp('current') || slurp('last');
    chomp $current;
    my @queue = lines 'pl/queue';
    my $i = -1;
    for (0..$#queue) {
        $i = $_ and last if $queue[$_] eq $current;
    }
    $i != -1 or die failure "last not in queue: $current\n";
    if ($i > 0) {
        fork or do {
            splat 'control-pipe', "pt_step $i\n";
            exit;
        };
    }
    system("mplayer @mplayer_opts -input file=control-pipe -playlist pl/queue | ./mym parse");
    splat 'current', '';
}
elsif ($command eq 'up') {
    my $track = select_track;
     # Just add to pl/up
    if (grep $_ eq "$track", lines 'pl/up') {
        warn warning "already in pl/up: $track\n";
    }
    else {
        append 'pl/up', "$track\n";
    }
    warn success "up: $track\n";
    if ($notify) {
        system 'notify-send', 'mym up', escape_html($track);
    }
}
elsif ($command eq 'down') {
    my $track = select_track;
     # Add to pl/down
    if (grep $_ eq "$track", lines 'pl/down') {
        warn warning "already in pl/down: $track\n";
    }
    else {
        append 'pl/down', "$track\n";
    }
    warn success "down: $track\n";
     # And stop playing the track too
    if ($selected_current) {
        -e 'control-pipe' or die failure "control-pipe doesn't exist.\n";
        splat 'control-pipe', "pt_step +1\n";
    }
    if ($notify) {
        system 'notify-send', 'mym down', escape_html($track);
    }
}
elsif ($command eq 'info') {
    my $track = select_track;
    (my $esc_track = $track) =~ s/'/'\\''/g;
    my $info = `id3v2 -R '$esc_track'`;
    my $num = $info =~ /^TRCK: (.*)$/m
        ? $1 : '<unknown track number>';
    my $downed = grep $_ eq "$track", lines 'pl/down';
    my $upped = grep $_ eq "$track", lines 'pl/up';
    my $rating = $downed ? $upped ? 'ERROR: conflicting ratings'
                         : 'rated down'
               : $upped ? 'rated up'
               : 'not rated';
    my $title = $info =~ /^TIT2: (.*)$/m
        ? $1 : '<unknown title>';
    my $artist = $info =~ /^TPE1: (.*)$/m
        ? $1 : '<unknown artist>';
    my $album = $info =~ /^TALB: (.*)$/m
        ? $1 : '<unknown album>';
    my $comment = $info =~ /^COMM: (?:\(\)\[[^\]]+\]: )?(.*?)^[A-Z0-9]{4}:/ms
        ? $1 : undef;
    my $display = "$num ($rating)\n$title\n$artist\n$album\n";
    if (defined $comment) {
        $display .= "\n$comment";
    }
    $display .= "\n" unless $display =~ /\n$/;
    if ($notify) {
        system 'notify-send', 'mym info', escape_html($display);
    }
    print $display;
}
elsif ($command eq 'control') {
    -e 'control-pipe' or die failure "control-pipe doesn't exist.\n";
    splat 'control-pipe', (join ' ', @ARGV) . "\n";
}
elsif ($command eq 'parse') {
    local $| = 1;
    my $in = '';
    my $chunk = '';
    while (sysread STDIN, my $chunk, 1000) {
        print $chunk;
        $in .= $chunk;
        while ($in =~ s/^((?:Playing (.*)\.|.*)[\n\r])//) {
            my $track = $2;
            if (defined $track) {
                $track =~ /([^\/]*)$/;
                print "\e]0;mym - $1\a";
                splat 'current', "$track\n";
                rename 'last', 'previous';
                splat 'last', "$track\n";
            }
        }
    }
}
elsif ($command eq 'help') {
    USAGE;
}
else {
    die failure "No command $command.  Accepted are: play up down info control parse help\n";
}
